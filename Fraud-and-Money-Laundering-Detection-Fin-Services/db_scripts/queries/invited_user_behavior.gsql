CREATE QUERY invited_user_behavior(VERTEX<User> input_user) FOR GRAPH AntiFraud SYNTAX V2 {
/* 
    Detect users who conduct fraudulent referrals in order to receive high amounts of referral bonuses.

    Sample inputs:
    input_user: 5354357 | 30746939 | 23189347
      
    Starting from an "input_user",
    (1) Find all the Users referred by input_user, and then all the Users
    referred by them.
      input_user -(refer)-> User -(refer)-> User
    (2) Aggregate the amounts of all transactions conducted by the one-hop 
    invitees (1) into variable @@total_amount_sent. Also, store the traversed 
    edges into @@edges_to_display
    (3) Second-hop traversal. Find users invited by the one-hop invitees (1)
    and store their count in @@num_invited_persons. And record the 
    traversed edges into @@edges_to_display 
    (4) Return the number of 2-hop invitees, total transferred money by 1-hop 
    and 2-hop invitees
    (5) Display the two-hop referral graph.

    Intuitively, if input_user is engaging in referral fraud, there will be
    1. a large number of 1st-hop invitees,
    2. a small amount of total transactions by the 1st-hop invitees, and
    3. a small number of 2nd-hop invitees.
*/

    SumAccum<INT> @@num_invited_persons;
    SumAccum<FLOAT> @@total_amount_sent;
    SetAccum<EDGE> @@edges_to_display;

    start = {input_user};  

    first_invitees = SELECT t FROM start:s - (User_Refer_User>:e) - :t
                     ACCUM @@edges_to_display += e;

    trans = SELECT t FROM first_invitees:s - ((User_Transfer_Transaction>):e) - :t
            ACCUM @@total_amount_sent += t.amount,
                  @@edges_to_display += e;

    second_invitees = SELECT t FROM first_invitees:s - (User_Refer_User>:e) - :t
                      WHERE t != input_user
                      ACCUM @@edges_to_display += e
                      POST-ACCUM (t) 
                          @@num_invited_persons += 1;

    PRINT @@num_invited_persons, @@total_amount_sent;
    PRINT @@edges_to_display AS displayed_edges;
}
