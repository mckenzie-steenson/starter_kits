CREATE QUERY common_customers(VERTEX<merchant_account> merchant1, VERTEX<merchant_account> merchant2) FOR GRAPH MyGraph { 
/*
    Get common customers between two merchants by traversing similar payments. 
    
    Sample inputs:
    merchant1: merchant1
    merchant2: merchant2
    
    Starting from "merchant1", 
    (1) Start graph Traversal from first merchant to find all associated payments. Use visited flag to remember payments visited
    FROM mer1:s -(reverse_receives_pmnt:e)-> payment:t
    (2) For those payments, find all the linked customers
    FROM payments1:s -(reverse_sends:e)-> user_account:t
    (3) Start graph traversal from second merchant to find all payments
    FROM mer2:s -(reverse_receives_pmnt:e)-> payment:t
    (4) Find common customers by starting from payments in Step 3
    (5) From common customers find all payments that have been visited in earlier steps. Collect the edges so they can be printed
    (6) From payments find associated merchants. Collect and print edges (payments â€“ merchants) and merchants.
*/
    
    OrAccum @visited;
    SetAccum<EDGE> @@edge_set;
    mer1 =  {merchant1};
    mer2 =  {merchant2};

    payments1 = SELECT t FROM mer1:s -(reverse_receives_pmnt:e)-> payment:t
                ACCUM t.@visited += true;
    
    customer1 = SELECT t FROM payments1:s -(reverse_sends:e)-> user_account:t
                ACCUM t.@visited += true;

    payments2 = SELECT t FROM mer2:s -(reverse_receives_pmnt:e)-> payment:t
                ACCUM t.@visited += true;
    
    common_customers = SELECT t FROM payments2:s -(reverse_sends:e)-> user_account:t
                       WHERE t.@visited == TRUE;
     PRINT common_customers;
       
    payments = SELECT t FROM common_customers:s -(sends:e)-> payment:t
               WHERE t.@visited == TRUE
               ACCUM @@edge_set += e;
    
    PRINT payments;

    merchant = SELECT t FROM payments:s -(receives_pmnt:e)-> merchant_account:t
               ACCUM @@edge_set += e;
    
    PRINT merchant;
    PRINT @@edge_set;
}
