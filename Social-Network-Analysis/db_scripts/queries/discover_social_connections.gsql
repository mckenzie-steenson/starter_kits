CREATE QUERY discover_social_connections(VERTEX<Person> input_person_a, VERTEX<Person> input_person_b, INT k) FOR GRAPH connectivity SYNTAX V2
{
/* 
    This query infers all of the people a particular person knows.
    
    Samples:
    input_person_a:115062  input_person_b:198915  K:6
    input_person_a:230336  input_person_b:364310  K:6
    input_person_a:246667  input_person_b:238358  K:6
	
    Iteration one
    (1) Find all person relates to A or B
    	Find related citizens via hotel flight, train, bus or case
    (2) Print top k people relates both A and B
    Iteration two
    (1) Start from the person knows only A or B
    (2) Find those people who knows only A knows a person that knows only B
    (3) Find those people who knows only B knows a person that knows only A 
    (4) Print top k people from 2 and 3
*/
   
    SumAccum<INT> @score = 0;
    OrAccum @know_A = false, @know_B = false;
    SetAccum<EDGE> @evidence, @@edge_set;
    SetAccum<VERTEX> @@vertex_set;

    BOOL is_first_iter = TRUE;

    L0 (ANY) = {A,B};
    WHILE TRUE LIMIT 2 DO
      L0 = SELECT v FROM L0:v
           POST-ACCUM CASE WHEN v == A THEN v.@know_A += TRUE END,
                 CASE WHEN v == B THEN v.@know_B += TRUE END,
    	      v.@score = 1;
      L1 (ANY) = L0;

     log(true, " hotel, flight, train, bus, case");
     WHILE TRUE LIMIT 2 DO
       L1 = SELECT t FROM L1:s-((hasHomeAddress|hasHotelStay|hasFlight|hasTrainRide|hasBusRide|hasCaseReport):e)-:t
            WHERE t.@score == 0 
            ACCUM t.@know_A += s.@know_A,
                  t.@know_B += s.@know_B,
                  t.@score += s.@score,
                  t.@evidence += s.@evidence,
                  t.@evidence += e;
     END;

     RELATED = L1;
     L1 = L0;


     log(true, "PHONE CALL, MONEY TRANS");
     L1 = SELECT t FROM L1:s-((hasPhone|hasBankAccount):e)-:t 
          WHERE t.@score == 0
          ACCUM t.@know_A += s.@know_A,
                t.@know_B += s.@know_B,
                t.@score += s.@score,
                t.@evidence += s.@evidence,
                t.@evidence += e;
     
     WHILE TRUE LIMIT 2 DO 
       L1 = SELECT t FROM L1:s-((hasFundsTransfer|hasPhoneCall):e)-:t 
            WHERE t.@score == 0
            ACCUM t.@know_A += s.@know_A,
                  t.@know_B += s.@know_B,
                  t.@score += s.@score,
                  t.@evidence += s.@evidence,
                  t.@evidence += e;
     END;
     L1 = SELECT t FROM L1:s-((hasPhone|hasBankAccount):e)-:t  
          WHERE t.@score == 0
          ACCUM t.@know_A += s.@know_A,
                t.@know_B += s.@know_B,
                t.@score += s.@score,
                t.@evidence += s.@evidence,
                t.@evidence += e;
    
     // add the newly found citizens to the related set
     RELATED = RELATED UNION L1;

     log(TRUE, "get common_ab");
     // Extract the people having common relations 
     // and keep the top k
     common_ab = SELECT t FROM RELATED:t
                 WHERE t.@know_A == TRUE AND t.@know_B == TRUE
                 ORDER BY t.@score
                 LIMIT k;

     common_ab = SELECT s FROM common_ab:s
                 ACCUM @@edge_set += s.@evidence;
     
     IF is_first_iter == TRUE THEN
       // find the person that knows only A or B
       L0 = RELATED MINUS common_ab;
    		log(true,L0.size());
     END;
     is_first_iter = FALSE;
     END;

     PRINT @@edge_set;
     getVertexesFromEdge(@@edge_set, @@vertex_set); 
     start = {@@vertex_set};
     start = SELECT s FROM start:s
             POST-ACCUM s.@evidence.clear();
     PRINT start;
}
