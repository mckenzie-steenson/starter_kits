CREATE QUERY person_same_as_who(VERTEX<Person> input_person, INT top_k) FOR GRAPH connectivity SYNTAX V2 {
/* 
    This query calculates the Jaccard Similarity between a given person vertex and every other vertic.
    (A similarity edge with one FLOAT attribute in the schema is required for this version.)
    
    Samples:
    input_person：55521 ; top_k:5
    input_person：127463 ; top_k:10
    input_person：174490 ; top_k:15
    
    Jaccard similarity =
    (1) The JSON and FILE version keeps the top k pairs of vertices. The result in FILE version is not in order.
    (2) The Attribute version insert edges between the pairs, with the score as an edge attribute
        
        
    Starting from the "input_person",
    (1) Calculate the outdegree along the hasBusRide, hasTrainRide, and hasBankAccount edges
    (2) Calculate the Jaccard similarity score, intersection_size / (size_A + size_B - intersection_size) of the vertices connected to the input person
    (3) Print the "input_person" and the topk most similar people 

*/
    SumAccum<INT> @intersection_size, @@set_size_A, @set_size_B;
    SumAccum<FLOAT> @similarity;
    start (ANY) = {input_person};
    start = SELECT s FROM start:s
            ACCUM @@set_size_A += s.outdegree("hasBusRide"), @@set_size_A += s.outdegree("hasTrainRide"), @@set_size_A += s.outdegree("hasBankAccount");

    subjects = SELECT t
               FROM start:s-((hasBusRide|hasTrainRide|hasFlight):e)-:t;

    same_as_set = SELECT t FROM subjects:s -((hasBusRide|hasTrainRide|hasFlight):e)- Person:t
                  WHERE t != input_person
                  ACCUM t.@intersection_size += 1,
                        t.@set_size_B = t.outdegree("hasBusRide") + t.outdegree("hasTrainRide")+ t.outdegree("hasFlight")
                  POST-ACCUM t.@similarity = t.@intersection_size*1.0/(@@set_size_A + t.@set_size_B - t.@intersection_size)
                  ORDER BY t.@similarity DESC
                  LIMIT top_k;

    PRINT start, same_as_set;
}
