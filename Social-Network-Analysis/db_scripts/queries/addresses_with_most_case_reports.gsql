CREATE QUERY addresses_with_most_case_reports() FOR GRAPH connectivity API("v2") SYNTAX v2 {
/*
    Find the top 10 addresses with the most number of case reports.
    
    Sample input:
    No input
    
    Starting from a Person vertex,
    (1) Accumulate the person vertices to a vertex SetAccum to the address vertex
    (2) Set the SumAccum of the address vertex to the size of the vertex set in step 1 (number of people at the addresses)
    (3) Add the address vertex and the number of people at the addresses to a HeapAccum
    (4) Pop each vertex out of the HeapAccum and add it to a vertex set
    (5) Select the same vertices from step 1 to print in a subgraph
    (6) Print the top 10 addresses with the most number of case reports 
*/
    TYPEDEF TUPLE<VERTEX<Address> v, DOUBLE f0> Top_Ten_Tuple;

    SetAccum<VERTEX> @number_of_people_with_case_reports_set;
    SumAccum<INT> @number_Of_people_with_case_reports;
    HeapAccum<Top_Ten_Tuple>(10, f0 DESC) @@ordered_top_ten_heap;
    SetAccum<VERTEX<Address>> @@ordered_top_ten_set;
    SetAccum<EDGE> @@final_edge_set_has_address;
    SetAccum<VERTEX<Person>> @@final_vertex_set_person;
    SetAccum<VERTEX<Address>> @@final_vertex_set_address;

    vertex_set_3 = SELECT a FROM Person:p -(hasCaseReport:cr_edge)- CaseReport:cr,
                                              Person:p -(hasHomeAddress:ha_edge)- Address:a
                   ACCUM a.@number_of_people_with_case_reports_set += p
                   POST-ACCUM a.@number_Of_people_with_case_reports = a.@number_of_people_with_case_reports_set.size(),
                      @@ordered_top_ten_heap += Top_Ten_Tuple(a, a.@number_Of_people_with_case_reports);
                   WHILE (@@ordered_top_ten_heap.size() > 0) DO
                     @@ordered_top_ten_set += @@ordered_top_ten_heap.pop().v;
                   END;
    
    vertex_set_3 = { @@ordered_top_ten_set };

    vertex_set_3 = SELECT a FROM Person:p -(hasCaseReport:cr_edge)- CaseReport:cr,
                                             Person:p -(hasHomeAddress:ha_edge)- vertex_set_3:a
                  ACCUM @@final_edge_set_has_address += ha_edge
                  POST-ACCUM @@final_vertex_set_person += p
                  POST-ACCUM @@final_vertex_set_address += a;

    PRINT @@final_edge_set_has_address;

    vertex_set_2 = { @@final_vertex_set_person };
    PRINT vertex_set_2[
      vertex_set_2.fullName AS fullName,
      vertex_set_2.dob AS dob,
      vertex_set_2.email AS email,
      vertex_set_2.gender AS gender,
      vertex_set_2.ethic_group AS ethic_group
    ];

    vertex_set_3 = { @@final_vertex_set_address };
    PRINT vertex_set_3[
      vertex_set_3.@number_Of_people_with_case_reports AS numberOfPeopleWithCaseReports
    ];

}
